// generated by 'threeport-sdk gen' - do not edit

//go:build mage
// +build mage

package main

import (
	"fmt"
	util "github.com/threeport/threeport/pkg/util/v0"
	installer "github.com/threeport/wordpress-threeport-extension/pkg/installer/v0"
	"os"
	"os/exec"
	"runtime"
)

// BuildApi builds the REST API binary.
func BuildApi(arch string) error {
	workingDir, _, err := getBuildVals()
	if err != nil {
		return fmt.Errorf("failed to get working directory for extension repo: %w", err)
	}

	if err := util.BuildBinary(
		workingDir,
		arch,
		"rest-api",
		"cmd/rest-api/main_gen.go",
		false,
	); err != nil {
		return fmt.Errorf("failed to build rest-api binary: %w", err)
	}

	fmt.Println("binary built and available at bin/rest-api")

	return nil
}

// BuildDevApi builds the REST API binary for the architcture of the machine
// where it is built.
func BuildDevApi() error {
	_, arch, err := getBuildVals()
	if err != nil {
		return fmt.Errorf("failed to get local CPU architecture: %w", err)
	}

	if err := BuildApi(arch); err != nil {
		return fmt.Errorf("failed to build dev rest-api binary: %w", err)
	}

	return nil
}

// BuildReleaseApi builds the REST API binary for amd64 architecture.
func BuildReleaseApi() error {
	if err := BuildApi("amd64"); err != nil {
		return fmt.Errorf("failed to build release rest-api binary: %w", err)
	}

	return nil
}

// BuildApiImage builds and pushes a REST API container image.
func BuildApiImage(
	imageRepo string,
	imageTag string,
	arch string,
) error {
	workingDir, _, err := getBuildVals()
	if err != nil {
		return fmt.Errorf("failed to get working directory for extension repo: %w", err)
	}

	if err := util.BuildImage(
		workingDir,
		"cmd/rest-api/image/Dockerfile-alpine",
		arch,
		imageRepo,
		"threeport-wordpress-rest-api",
		imageTag,
		true,
		false,
		"",
	); err != nil {
		return fmt.Errorf("failed to build and push rest-api image: %w", err)
	}

	return nil
}

// BuildApiDevImage builds and pushes a development REST API container image.
func BuildApiDevImage() error {
	_, arch, err := getBuildVals()
	if err != nil {
		return fmt.Errorf("failed to get local CPU architecture: %w", err)
	}

	if err := BuildApiImage(
		installer.DevImageRepo,
		installer.DevImageTag,
		arch,
	); err != nil {
		return fmt.Errorf("failed to build and push dev rest-api image: %w", err)
	}

	return nil
}

// BuildApiReleaseImage builds and pushes a release REST API container image.
func BuildApiReleaseImage() error {
	if err := BuildApiImage(
		installer.DevImageRepo,
		installer.DevImageTag,
		"amd64",
	); err != nil {
		return fmt.Errorf("failed to build and push release rest-api image: %w", err)
	}

	return nil
}

// BuildDbMigrator builds the database migrator binary.
func BuildDbMigrator(arch string) error {
	workingDir, _, err := getBuildVals()
	if err != nil {
		return fmt.Errorf("failed to get working directory for extension repo: %w", err)
	}

	if err := util.BuildBinary(
		workingDir,
		arch,
		"database-migrator",
		"cmd/database-migrator/main_gen.go",
		false,
	); err != nil {
		return fmt.Errorf("failed to build database-migrator binary: %w", err)
	}

	fmt.Println("binary built and available at bin/database-migrator")

	return nil
}

// BuildDevDbMigrator builds the database migrator binary for the architcture of the machine
// where it is built.
func BuildDevDbMigrator() error {
	_, arch, err := getBuildVals()
	if err != nil {
		return fmt.Errorf("failed to get local CPU architecture: %w", err)
	}

	if err := BuildDbMigrator(arch); err != nil {
		return fmt.Errorf("failed to build dev database-migrator binary: %w", err)
	}

	return nil
}

// BuildReleaseDbMigrator builds the database migrator binary for amd64 architecture.
func BuildReleaseDbMigrator() error {
	if err := BuildDbMigrator("amd64"); err != nil {
		return fmt.Errorf("failed to build release database-migrator binary: %w", err)
	}

	return nil
}

// BuildDbMigratorImage builds and pushes a database migrator container image.
func BuildDbMigratorImage(
	imageRepo string,
	imageTag string,
	arch string,
) error {
	workingDir, _, err := getBuildVals()
	if err != nil {
		return fmt.Errorf("failed to get working directory for extension repo: %w", err)
	}

	if err := util.BuildImage(
		workingDir,
		"cmd/database-migrator/image/Dockerfile-alpine",
		arch,
		imageRepo,
		"threeport-wordpress-database-migrator",
		imageTag,
		true,
		false,
		"",
	); err != nil {
		return fmt.Errorf("failed to build and push database-migrator image: %w", err)
	}

	return nil
}

// BuildDbMigratorDevImage builds and pushes a development database migrator container image.
func BuildDbMigratorDevImage() error {
	_, arch, err := getBuildVals()
	if err != nil {
		return fmt.Errorf("failed to get local CPU architecture: %w", err)
	}

	if err := BuildDbMigratorImage(
		installer.DevImageRepo,
		installer.DevImageTag,
		arch,
	); err != nil {
		return fmt.Errorf("failed to build and push dev database-migrator image: %w", err)
	}

	return nil
}

// BuildDbMigratorReleaseImage builds and pushes a release database migrator container image.
func BuildDbMigratorReleaseImage() error {
	if err := BuildDbMigratorImage(
		installer.DevImageRepo,
		installer.DevImageTag,
		"amd64",
	); err != nil {
		return fmt.Errorf("failed to build and push release database-migrator image: %w", err)
	}

	return nil
}

// BuildWordpressController builds the binary for the wordpress-controller.
func BuildWordpressController(arch string) error {
	workingDir, _, err := getBuildVals()
	if err != nil {
		return fmt.Errorf("failed to get working directory for extension repo: %w", err)
	}

	if err := util.BuildBinary(
		workingDir,
		arch,
		"wordpress-controller",
		"cmd/wordpress-controller/main_gen.go",
		false,
	); err != nil {
		return fmt.Errorf("failed to build wordpress-controller binary: %w", err)
	}

	fmt.Println("binary built and available at bin/wordpress-controller")

	return nil
}

// BuildDevWordpressController builds the wordpress-controller binary for the architcture of the machine
// where it is built.
func BuildDevWordpressController() error {
	_, arch, err := getBuildVals()
	if err != nil {
		return fmt.Errorf("failed to get local CPU architecture: %w", err)
	}

	if err := BuildWordpressController(arch); err != nil {
		return fmt.Errorf("failed to build dev wordpress-controller binary: %w", err)
	}

	return nil
}

// BuildReleaseWordpressController builds the wordpress-controller binary for amd64 architecture.
func BuildReleaseWordpressController() error {
	if err := BuildWordpressController("amd64"); err != nil {
		return fmt.Errorf("failed to build release wordpress-controller binary: %w", err)
	}

	return nil
}

// BuildWordpressControllerImage builds and pushes the container image for the wordpress-controller.
func BuildWordpressControllerImage(
	imageRepo string,
	imageTag string,
	arch string,
) error {
	workingDir, _, err := getBuildVals()
	if err != nil {
		return fmt.Errorf("failed to get working directory for extension repo: %w", err)
	}

	if err := util.BuildImage(
		workingDir,
		"cmd/wordpress-controller/image/Dockerfile-alpine",
		arch,
		imageRepo,
		"threeport-wordpress-controller",
		imageTag,
		true,
		false,
		"",
	); err != nil {
		return fmt.Errorf("failed to build and push wordpress-controller image: %w", err)
	}

	return nil
}

// BuildWordpressControllerDevImage builds and pushes a development wordpress-controller container image.
func BuildWordpressControllerDevImage() error {
	_, arch, err := getBuildVals()
	if err != nil {
		return fmt.Errorf("failed to get local CPU architecture: %w", err)
	}

	if err := BuildWordpressControllerImage(
		installer.DevImageRepo,
		installer.DevImageTag,
		arch,
	); err != nil {
		return fmt.Errorf("failed to build and push dev wordpress-controller image: %w", err)
	}

	return nil
}

// BuildWordpressControllerReleaseImage builds and pushes a release wordpress-controller container image.
func BuildWordpressControllerReleaseImage() error {
	if err := BuildWordpressControllerImage(
		installer.DevImageRepo,
		installer.DevImageTag,
		"amd64",
	); err != nil {
		return fmt.Errorf("failed to build and push release wordpress-controller image: %w", err)
	}

	return nil
}

// BuildAll builds the binaries for all components.
func BuildAll(arch string) error {
	if err := BuildApi(arch); err != nil {
		return fmt.Errorf("failed to build binary: %w", err)
	}

	if err := BuildDbMigrator(arch); err != nil {
		return fmt.Errorf("failed to build binary: %w", err)
	}

	if err := BuildWordpressController(arch); err != nil {
		return fmt.Errorf("failed to build binary: %w", err)
	}

	return nil
}

// BuildAllImages builds and pushes images for all components.
func BuildAllImages(
	imageRepo string,
	imageTag string,
	arch string,
) error {
	if err := BuildApiImage(imageRepo, imageTag, arch); err != nil {
		return fmt.Errorf("failed to build and push image: %w", err)
	}

	if err := BuildDbMigratorImage(imageRepo, imageTag, arch); err != nil {
		return fmt.Errorf("failed to build and push image: %w", err)
	}

	if err := BuildWordpressControllerImage(imageRepo, imageTag, arch); err != nil {
		return fmt.Errorf("failed to build and push image: %w", err)
	}

	return nil
}

// BuildAllDevImages builds and pushes development images for all components.
func BuildAllDevImages() error {
	if err := BuildApiDevImage(); err != nil {
		return fmt.Errorf("failed to build and push image: %w", err)
	}

	if err := BuildDbMigratorDevImage(); err != nil {
		return fmt.Errorf("failed to build and push image: %w", err)
	}

	if err := BuildWordpressControllerDevImage(); err != nil {
		return fmt.Errorf("failed to build and push image: %w", err)
	}

	return nil
}

// LoadDevImage builds and loads an image to the provided kind cluster.
func LoadDevImage(kindClusterName string, component string) error {
	workingDir, arch, err := getBuildVals()
	if err != nil {
		return fmt.Errorf("failed to get build values: %w", err)
	}

	imageName := fmt.Sprintf("threeport-%s", component)
	if component == "rest-api" {
		imageName = fmt.Sprintf("threeport-%s-%s", "wordpress", component)
	}

	if err := util.BuildImage(
		workingDir,
		fmt.Sprintf("cmd/%s/image/Dockerfile-alpine", component),
		arch,
		installer.DevImageRepo,
		imageName,
		installer.DevImageTag,
		false,
		true,
		kindClusterName,
	); err != nil {
		return fmt.Errorf("failed to build and load image: %w", err)
	}

	return nil
}

// BuildPlugin compiles the extension's tptctl plugin
func BuildPlugin() error {
	buildCmd := exec.Command(
		"go",
		"build",
		"-o",
		"bin/wordpress.so",
		"-buildmode=plugin",
		"cmd/wordpress/main_gen.go",
	)

	output, err := buildCmd.CombinedOutput()
	if err != nil {
		return fmt.Errorf("build failed for tptctl plugin with output '%s': %w", output, err)
	}

	fmt.Println("tptctl plugin built and available at bin/wordpress.so")

	return nil
}

// Docs generates the API server documentation that is served by the API
func Docs() error {
	docsDestination := "pkg/api-server/v0/docs"
	swagCmd := exec.Command(
		"swag",
		"init",
		"--dir",
		"cmd/rest-api,pkg/api,pkg/api-server/v0",
		"--parseDependency",
		"--generalInfo",
		"main_gen.go",
		"--output",
		docsDestination,
	)

	output, err := swagCmd.CombinedOutput()
	if err != nil {
		return fmt.Errorf("API docs generation failed with output '%s': %w", output, err)
	}

	fmt.Printf("API docs generated in %s\n", docsDestination)

	return nil
}

// getBuildVals returns the working directory and arch for builds.
func getBuildVals() (string, string, error) {
	workingDir, err := os.Getwd()
	if err != nil {
		return "", "", fmt.Errorf("failed to get working directory: %w", err)
	}

	arch := runtime.GOARCH

	return workingDir, arch, nil
}
