// generated by 'threeport-sdk gen' - do not edit

//go:build mage
// +build mage

package main

import (
	"fmt"
	util "github.com/threeport/threeport/pkg/util/v0"
	"os"
	"os/exec"
	"runtime"
)

// BuildApi builds the REST API binary.
func BuildApi() error {
	workingDir, arch, err := getBuildVals()
	if err != nil {
		return fmt.Errorf("failed to get build values: %w", err)
	}

	if err := util.BuildBinary(
		workingDir,
		arch,
		"rest-api",
		"cmd/rest-api/main_gen.go",
		false,
	); err != nil {
		return fmt.Errorf("failed to build rest-api binary: %w", err)
	}

	fmt.Println("binary built and available at bin/rest-api")

	return nil
}

// BuildApiImage builds and pushes a development REST API image.
func BuildApiImage() error {
	workingDir, arch, err := getBuildVals()
	if err != nil {
		return fmt.Errorf("failed to get build values: %w", err)
	}

	if err := util.BuildImage(
		workingDir,
		"cmd/rest-api/image/Dockerfile-alpine",
		arch,
		"localhost:5001",
		"threeport-wordpress-rest-api",
		"dev",
		true,
		false,
		"",
	); err != nil {
		return fmt.Errorf("failed to build and push rest-api image: %w", err)
	}

	return nil
}

// BuildDbMigrator builds the database migrator binary.
func BuildDbMigrator() error {
	workingDir, arch, err := getBuildVals()
	if err != nil {
		return fmt.Errorf("failed to get build values: %w", err)
	}

	if err := util.BuildBinary(
		workingDir,
		arch,
		"database-migrator",
		"cmd/database-migrator/main_gen.go",
		false,
	); err != nil {
		return fmt.Errorf("failed to build database-migrator binary: %w", err)
	}

	fmt.Println("binary built and available at bin/database-migrator")

	return nil
}

// BuildDbMigratorImage builds and pushes a development database migrator image.
func BuildDbMigratorImage() error {
	workingDir, arch, err := getBuildVals()
	if err != nil {
		return fmt.Errorf("failed to get build values: %w", err)
	}

	if err := util.BuildImage(
		workingDir,
		"cmd/database-migrator/image/Dockerfile-alpine",
		arch,
		"localhost:5001",
		"threeport-wordpress-database-migrator",
		"dev",
		true,
		false,
		"",
	); err != nil {
		return fmt.Errorf("failed to build and push database-migrator image: %w", err)
	}

	return nil
}

// BuildWordpressController builds the binary for the wordpress-controller.
func BuildWordpressController() error {
	workingDir, arch, err := getBuildVals()
	if err != nil {
		return fmt.Errorf("failed to get build values: %w", err)
	}

	if err := util.BuildBinary(
		workingDir,
		arch,
		"wordpress-controller",
		"cmd/wordpress-controller/main_gen.go",
		false,
	); err != nil {
		return fmt.Errorf("failed to build wordpress-controller binary: %w", err)
	}

	fmt.Println("binary built and available at bin/wordpress-controller")

	return nil
}

// BuildWordpressControllerImage builds and pushes the container image for the wordpress-controller.
func BuildWordpressControllerImage() error {
	workingDir, arch, err := getBuildVals()
	if err != nil {
		return fmt.Errorf("failed to get build values: %w", err)
	}

	if err := util.BuildImage(
		workingDir,
		"cmd/wordpress-controller/image/Dockerfile-alpine",
		arch,
		"localhost:5001",
		"threeport-wordpress-controller",
		"dev",
		true,
		false,
		"",
	); err != nil {
		return fmt.Errorf("failed to build and push wordpress-controller image: %w", err)
	}

	return nil
}

// BuildAll builds the binaries for all components.
func BuildAll() error {
	if err := BuildApi(); err != nil {
		return fmt.Errorf("failed to build binary: %w", err)
	}

	if err := BuildDbMigrator(); err != nil {
		return fmt.Errorf("failed to build binary: %w", err)
	}

	if err := BuildWordpressController(); err != nil {
		return fmt.Errorf("failed to build binary: %w", err)
	}

	return nil
}

// BuildAllImages builds and pushes images for all components.
func BuildAllImages() error {
	if err := BuildApiImage(); err != nil {
		return fmt.Errorf("failed to build and push image: %w", err)
	}

	if err := BuildDbMigratorImage(); err != nil {
		return fmt.Errorf("failed to build and push image: %w", err)
	}

	if err := BuildWordpressControllerImage(); err != nil {
		return fmt.Errorf("failed to build and push image: %w", err)
	}

	return nil
}

// LoadImage builds and loads an image to the provided kind cluster.
func LoadImage(kindClusterName string, component string) error {
	workingDir, arch, err := getBuildVals()
	if err != nil {
		return fmt.Errorf("failed to get build values: %w", err)
	}

	imageName := fmt.Sprintf("threeport-%s", component)
	if component == "rest-api" {
		imageName = fmt.Sprintf("threeport-%s-%s", "wordpress", component)
	}

	if err := util.BuildImage(
		workingDir,
		fmt.Sprintf("cmd/%s/image/Dockerfile-alpine", component),
		arch,
		"localhost:5001",
		imageName,
		"dev",
		false,
		true,
		kindClusterName,
	); err != nil {
		return fmt.Errorf("failed to build and load image: %w", err)
	}

	return nil
}

// Docs generates the API server documentation that is served by the API
func Docs() error {
	docsDestination := "pkg/api-server/v0/docs"
	swagCmd := exec.Command(
		"swag",
		"init",
		"--dir",
		"cmd/rest-api,pkg/api,pkg/api-server/v0",
		"--parseDependency",
		"--generalInfo",
		"main_gen.go",
		"--output",
		docsDestination,
	)

	output, err := swagCmd.CombinedOutput()
	if err != nil {
		return fmt.Errorf("API docs generation failed with output '%s': %w", output, err)
	}

	fmt.Printf("API docs generated in %s\n", docsDestination)

	return nil
}

// getBuildVals returns the working directory and arch for builds.
func getBuildVals() (string, string, error) {
	workingDir, err := os.Getwd()
	if err != nil {
		return "", "", fmt.Errorf("failed to get working directory: %w", err)
	}

	arch := runtime.GOARCH

	return workingDir, arch, nil
}
