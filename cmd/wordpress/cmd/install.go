// generated by 'threeport-sdk gen' but will not be regenerated - intended for modification

package cmd

import (
	"fmt"
	"os"

	cobra "github.com/spf13/cobra"
	tptctl_cmd "github.com/threeport/threeport/cmd/tptctl/cmd"
	cli "github.com/threeport/threeport/pkg/cli/v0"
	client "github.com/threeport/threeport/pkg/client/v0"
	config "github.com/threeport/threeport/pkg/config/v0"
	kube "github.com/threeport/threeport/pkg/kube/v0"
	installer "github.com/threeport/wordpress-threeport-extension/pkg/installer/v0"
)

// installCmd represents the install command
var installCmd = &cobra.Command{
	Example: "  tptctl wordpress install",
	Long:    "Install the Wordpress extension to an existing Threeport control plane",
	PreRun:  tptctl_cmd.CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, requestedControlPlane := tptctl_cmd.GetClientContext(cmd)

		// get Kubernetes runtime instance for control plane
		queryString := "ThreeportControlPlaneHost=true"
		kubernetesRuntimeInstances, err := client.GetKubernetesRuntimeInstancesByQueryString(
			apiClient,
			apiEndpoint,
			queryString,
		)
		if err != nil {
			cli.Error("failed to get kubernetes runtime instances", err)
			os.Exit(1)
		}
		if len(*kubernetesRuntimeInstances) != 1 {
			cli.Error(fmt.Sprintf("found %d k8s runtime instances", len(*kubernetesRuntimeInstances)), err)
			os.Exit(1)
		}
		kubeRuntimes := *kubernetesRuntimeInstances

		// get threeport config
		threeportConfig, _, err := config.GetThreeportConfig(requestedControlPlane)
		if err != nil {
			cli.Error("failed to get threeport config", err)
			os.Exit(1)
		}

		// get encryption key
		encryptionKey, err := threeportConfig.GetThreeportEncryptionKey(requestedControlPlane)
		if err != nil {
			cli.Error("failed to get Threeport API encryption key", err)
			os.Exit(1)
		}

		// get Kubernetes client
		dynamicInterface, restMapper, err := kube.GetClient(
			&kubeRuntimes[0],
			false,
			apiClient,
			apiEndpoint,
			encryptionKey,
		)
		if err != nil {
			cli.Error("failed to get Kube client", err)
			os.Exit(1)
		}

		// create installer
		installer := installer.NewInstaller(dynamicInterface, restMapper)

		// install extension
		if err := installer.InstallWordpressExtension(); err != nil {
			cli.Error("failed to install Wordpress extension", err)
			os.Exit(1)
		}

		// register extension with Threeport API
		if err := installer.RegisterWordpressExtension(
			apiClient,
			apiEndpoint,
		); err != nil {
			cli.Error("failed to register Wordpress extension with Threeport API", err)
			os.Exit(1)
		}

		cli.Complete("Wordpress extension installed")
	},
	Short:        "Install the Wordpress extension to an existing Threeport control plane",
	SilenceUsage: true,
	Use:          "install",
}

func init() {
	WordpressCmd.AddCommand(installCmd)
}
